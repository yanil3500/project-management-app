
import javax.swing.*;
import java.awt.event.ActionEvent;

/**
 * The <code>AddTaskForm</code> class is
 */
public class AddTaskForm extends JDialog {

    private JButton cancelButton;
    private JButton okButton;
    private JTextField taskTitleTextField;
    private JLabel taskTitleTextFieldLabel;
    private String taskName;


    /**
     * Creates new form AddTaskForm
     */
    public AddTaskForm(JFrame parent, boolean modal) {
        super(parent, modal);
        //Sets dialog location
        setModal(modal);
        setLocationRelativeTo(parent);
        initComponents();
    }

    private void initComponents() {

        //Initialization code
        taskTitleTextFieldLabel = new JLabel();
        taskTitleTextField = new JTextField();
        okButton = new JButton();
        cancelButton = new JButton();

        setTitle("Add A Task");

        taskTitleTextFieldLabel.setText("Name:");

        taskTitleTextField.setText("(Ex: Implement the 'Add Task' feature.)");

        okButton.setText("OK");
        okButton.addActionListener(evt -> okButtonActionPerformed(evt));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(evt -> cancelButtonActionPerformed(evt));

        //This Stackoverflow question was looked at: https://stackoverflow.com/questions/344969/making-a-jdialog-button-respond-to-the-enter-key
        //Enables the 'Enter' key for use by the form.
        getRootPane().setDefaultButton(okButton);


        //NOTE: This layout code was generated by the Netbeans GUI Builder.
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(taskTitleTextFieldLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskTitleTextField, GroupLayout.PREFERRED_SIZE, 345, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(cancelButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(okButton)
                                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(taskTitleTextFieldLabel)
                                        .addComponent(taskTitleTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(okButton)
                                        .addComponent(cancelButton)))
        );

        pack();
        setVisible(true);
    }

    private void okButtonActionPerformed(ActionEvent evt) {


        taskName = taskTitleTextField.getText();
        if (taskName.equals("")) {
            presentErrorMessage(taskTitleTextField, "The task must have a name.", "Required Field");
        }

        dispose();
    }

    public String getTitle(){
        return taskName;
    }

    private void cancelButtonActionPerformed(ActionEvent evt) {
        dispose();
    }

    private void presentErrorMessage(JComponent field, String message, String dialogTitle){
        JOptionPane.showMessageDialog(this, message, dialogTitle, JOptionPane.ERROR_MESSAGE);
        field.requestFocus();
    }


}

