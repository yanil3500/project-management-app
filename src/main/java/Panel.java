import javax.swing.*;
import java.awt.*;
import java.io.Serializable;


/**
 * NOTE about Serializable: This class implements Serializable so that these types of objects can be converted into a byte stream
 * and saved onto disk.
 */


public class Panel extends JLabel implements Drawable, Serializable {
    private Task task;
    /**
     * The lane to which this panel currently belongs.
     */
    private String laneName;
    private int xPos;
    private int yPos;
    private int width;
    private int height;
    private boolean showingMetadata;

    public Panel(Task task) {
        this.task = task;
        this.task.setPanel(this);
        showingMetadata = false;
    }

    //Copy constructor
    public Panel(Panel panel) {
        this.task = panel.task;
        this.laneName = panel.laneName;
        this.xPos = panel.xPos;
        this.yPos = panel.yPos;
        this.width = panel.width;
        this.height = panel.height;
        this.showingMetadata = panel.showingMetadata;
    }

    public void updatePosition(int x, int y, int initWidth, int initHeight) {
        xPos = x;
        yPos = y;
        width = initWidth;
        height = initHeight;
        this.setLocation(xPos, yPos);
        this.setSize(width, height);
    }

    public String getLaneName() {
        return laneName;
    }

    public void setLaneName(String laneName) {
        this.laneName = laneName;
    }

    public void setX(int x) {
        xPos = x;
    }

    public int getXPos() {
        return xPos;
    }

    public int getYPos() {
        return yPos;
    }

    public int getXBound() {
        return width;
    }

    public int getYBound() {
        return height;
    }

    public void setY(int y) {
        yPos = y;
    }

    @Override
    public void draw(Graphics g) {
        //drawing Panel
        g.setColor(Color.LIGHT_GRAY);
        g.fillRect(xPos, yPos, width, height);

        //drawing Task information Strings
        String title = task.getTitle();
        String author = task.getAuthor();
        String description = task.getDescription();
        String deadline = task.getDeadline();
        g.setColor(Color.BLACK);
        Font font = new Font("TimesRoman", Font.PLAIN, 12);
        int rise = g.getFontMetrics(font).getAscent();
        g.setFont(font);
        if (title != null) {
            g.drawString(title, xPos + 5, yPos + 5 + rise);
        }
        if (author != null) {
            g.drawString(author, xPos + 5, yPos + 10 + 2 * rise);
        }
        if (description != null) {
            g.drawString(description, xPos + 5, yPos + 15 + 3 * rise);
        }
        if (deadline != null) {
            g.drawString(deadline, xPos + 5, yPos + 20 + 4 * rise);
        }

        String moreInfo = "More Info";
        Font infoFont = new Font("TimesRoman", Font.PLAIN, 8);
        int infoRise = g.getFontMetrics(infoFont).getAscent();
        int infoLength = g.getFontMetrics(infoFont).stringWidth(moreInfo);
        g.setFont(infoFont);
        g.drawString(moreInfo, xPos + width - infoLength - 3, yPos + height - infoRise - 2);

        //displays metadata
        if (showingMetadata) {
            String created = task.getMetadata().getDateCreated().toString();
            String modified = task.getMetadata().getLastModified().toString();
            System.out.println("created = " + created);
            System.out.println("modified = " + modified);
            int createdLength = g.getFontMetrics(infoFont).stringWidth(created);
            int modifiedLength = g.getFontMetrics(infoFont).stringWidth(modified);
            int metadataLength;
            if (createdLength > modifiedLength) {
                metadataLength = createdLength;
            } else {
                metadataLength = modifiedLength;
            }
            g.setColor(Color.YELLOW);
            g.fillRect(xPos + width - 10, yPos + height - 10, metadataLength + 20, infoRise * 7 + 10);
            g.setColor(Color.BLACK);
            g.drawString("Task Created:", xPos + width + 5, yPos + height);
            g.drawString(created, xPos + width + 5, yPos + height + 2 * infoRise);
            g.drawString("Last Modified:", xPos + width + 5, yPos + height + 4 * infoRise);
            g.drawString(modified, xPos + width + 5, yPos + height + infoRise * 6);
        }
    }


    //Method to set whether or not to display metadata:

    public void setShowingMetadata(boolean showing) {
        showingMetadata = showing;
    }

    public boolean getShowingMetadata() {
        return showingMetadata;
    }

    /**
     * NOTE: the equals method was generated by the IntelliJ IDE.
     * Compares this panel to the specified object. The result is true if and only if
     * the argument is not null, is a Panel instance, and the specified object represents this panel.
     *
     * @param o
     * @return
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Panel panel = (Panel) o;

        return task != null ? task.equals(panel.task) : panel.task == null;
    }

    /**
     * Gets the task associated with this panel.
     *
     * @return a Task.
     */
    public Task getTask() {
        return this.task;
    }


    /**
     * Creates a panel instance with given task.
     *
     * @param taskTitle
     * @return Panel.
     */
    public static Panel createPanel(String taskTitle) {
        if (taskTitle == null || taskTitle.equals("")) {
            return null;
        }

        Task task = new Task(taskTitle);
        Panel panel = new Panel(task);

        return panel;
    }

}
